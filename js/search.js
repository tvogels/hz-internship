// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var $field, $form, $results, client, p;
    client = new $.es.Client({
      'host': 'localhost:9200'
    });
    $field = $('#search-query');
    $form = $('#search-form');
    $results = $('#results');
    $results.addClass('csspinner');
    p = client.search({
      index: 'hzbwnature',
      type: 'context',
      size: 1000,
      body: {
        query: {
          match_all: {}
        }
      }
    });
    return p.then(function(e) {
      var a, addWeight, children, findContext, result_template, source, supercontext, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      $results.removeClass('csspinner');
      supercontext = {};
      _ref = e.hits.hits;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        a = _ref[_i];
        supercontext[a._source.url] = a._source.supercontext;
      }
      children = {};
      _ref1 = e.hits.hits;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        a = _ref1[_j];
        children[a._source.supercontext] = [];
      }
      _ref2 = e.hits.hits;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        a = _ref2[_k];
        children[a._source.supercontext].push(a._source.url);
      }
      addWeight = function(url, weight, storage) {
        var sc;
        if (storage[url] != null) {
          storage[url] = storage[url] + weight;
        } else {
          storage[url] = weight;
        }
        sc = supercontext[url];
        if (url !== "ROOT") {
          storage = addWeight(sc, weight, storage);
        }
        return storage;
      };
      findContext = function(node, weights, minimum) {
        var c, childWeights, maxWeight, weight;
        weight = function(context) {
          if (weights[context] != null) {
            return weights[context];
          } else {
            return 0;
          }
        };
        if ((children == null) || !(children[node] instanceof Array)) {
          return node;
        }
        childWeights = (function() {
          var _l, _len3, _ref3, _results;
          _ref3 = children[node];
          _results = [];
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            c = _ref3[_l];
            _results.push({
              'node': c,
              'weight': weight(c)
            });
          }
          return _results;
        })();
        maxWeight = _.max(childWeights, function(w) {
          return w.weight;
        });
        if (maxWeight.weight > minimum) {
          return findContext(maxWeight.node, weights, minimum);
        } else {
          return node;
        }
      };
      source = $('#result-template').html();
      result_template = Handlebars.compile(source);
      Handlebars.registerHelper('ifvalue', function(conditional, options) {
        if (options.hash.value === conditional) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      });
      return $form.submit(function(e) {
        e.preventDefault();
        $results.addClass('csspinner');
        p = client.search({
          index: 'hzbwnature',
          type: 'intentional_element',
          size: 100,
          body: {
            query: {
              multi_match: {
                query: $field.val(),
                fields: ["skos:prefLabel^3", "skos:definition", "title^3", "content", "concerns_readable^2", "context_readable^2"]
              }
            }
          }
        });
        return p.then(function(resp) {
          var c, context, hit, hits, minimum, storage, _l, _len3, _len4, _len5, _m, _n, _ref3;
          console.log(resp);
          hits = resp.hits.hits;
          $results.html("");
          $results.removeClass('csspinner');
          for (_l = 0, _len3 = hits.length; _l < _len3; _l++) {
            hit = hits[_l];
            $results.append($('<div>').html(result_template(hit)));
          }
          storage = {};
          for (_m = 0, _len4 = hits.length; _m < _len4; _m++) {
            a = hits[_m];
            _ref3 = a._source.context;
            for (_n = 0, _len5 = _ref3.length; _n < _len5; _n++) {
              c = _ref3[_n];
              storage = addWeight(c, a._score, storage);
            }
          }
          minimum = storage.ROOT * 0.8;
          context = findContext('ROOT', storage, minimum);
          return $('.context').text(context);
        });
      });
    });
  });

}).call(this);
